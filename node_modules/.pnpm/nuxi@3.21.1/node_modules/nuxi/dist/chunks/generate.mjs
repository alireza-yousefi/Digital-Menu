import { d as defineCommand, c as cwdArgs, l as logLevelArgs, f as envNameArgs, b as legacyRootDirArgs, e as dotEnvArgs } from '../shared/nuxi.VcyMLvO6.mjs';
import buildCommand from './build.mjs';
import 'node:path';
import 'node:process';
import 'node:util';
import 'node:tty';
import 'node:url';
import '../shared/nuxi.BJEm6RIB.mjs';
import '../shared/nuxi.Bw8NeQM9.mjs';
import 'node:fs';
import 'node:module';
import '../shared/nuxi.ChFrgAY-.mjs';
import 'node:assert';
import 'node:v8';
import '../shared/nuxi.Do0aYBCO.mjs';
import '../shared/nuxi.lwJ73-e3.mjs';
import '../shared/nuxi.18GqYnAX.mjs';
import '../shared/nuxi.E-ZsRS8r.mjs';
import 'node:os';
import 'node:crypto';
import 'node:perf_hooks';
import 'node:vm';
import 'assert';
import 'fs';
import 'module';
import 'os';
import 'path';
import 'process';
import 'tty';
import 'url';
import 'util';
import 'v8';
import '../shared/nuxi.z2yg1iMX.mjs';
import '../shared/nuxi.DxPNCPm_.mjs';

const generate = defineCommand({
  meta: {
    name: "generate",
    description: "Build Nuxt and prerender all routes"
  },
  args: {
    ...cwdArgs,
    ...logLevelArgs,
    ...envNameArgs,
    ...legacyRootDirArgs,
    ...dotEnvArgs
  },
  async run(ctx) {
    ctx.args.prerender = true;
    await buildCommand.run(
      // @ts-expect-error types do not match
      ctx
    );
  }
});

export { generate as default };
